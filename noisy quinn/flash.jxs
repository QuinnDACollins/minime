<jittershader name="mfShader">
	<description> Shader for my midi fighter demo </description>

	<param name = "modelViewProjectionMat" type="mat4" state="MODELVIEW_PROJECTION_MATRIX"/>
	
	<param name = "texture0_Mat" type="mat4" state="TEXTURE0_MATRIX"/>
	<param name = "textureCoord" type="vec2" state="TEXCOORD"/>
	<param name = "position" type="vec3" state="POSITION" />
	<param name="pressed" type="vec3" state="VERTEX_ATTR1" />  

	<param name = "colorTex" type ="int" default="0"/>

	<param name = "flash" type="float" default="0"/>
	<param name = "size" type="vec2" default="0 0"/>


	<language name ="glsl" version ="1.5">

	<bind param = "texture0_Mat" program="vp"/>
	<bind param = "modelViewProjectionMat" program="vp"/>
	<bind param = "position" program="vp"/>
	<bind param = "textureCoord" program="vp"/>
	<bind param= "pressed" program="vp"/>  
	<bind param = "flash" program="fp"/>
	<bind param = "size" program="fp"/>


	<bind param = "colorTex" program="fp"/>

	

<program name="vp" type ="vertex">
<![CDATA[
// vertex shader
#version 330 core

uniform mat4 texture0_Mat;
uniform mat4 modelViewProjectionMat;

in vec2 textureCoord;
in vec3 position;
in vec3 offset;
in vec3 pressed;


out vec2 texcoord0;
out float isPressed;

void main()
{
	texcoord0 = (texture0_Mat * vec4(textureCoord, 0.0, 1.0)).xy;
	vec3 newPos = vec3(position.x, position.y, position.z);
	gl_Position = modelViewProjectionMat * vec4(newPos, 1.0);
}
]]>
	</program> 

	<program name ="fp" type ="fragment">
<![CDATA[
//fragment shader
#version 330 core

uniform sampler2D colorTex;
uniform vec2 size; 
uniform float flash;

in vec2 texcoord0;
in float isPressed;

out vec4 outColor;
void main()
{
	vec2 st = gl_FragCoord.xy / size;
	float l_l = step(0.5 + flash, st.x);
	float l_r = step(st.x, 0.5 + flash + 0.05);

	float r_l = step(0.5 - flash, st.x);
	float r_r = step(st.x, 0.5 - flash + 0.05);

	float r_band = r_l * r_r;
	float l_band = l_l * l_r;

	vec4 texColor = texture2D(colorTex, texcoord0);
	outColor = vec4(texColor.x, texColor.y, texColor.z, 1 - (1. * l_band) - (1. * r_band));
}
]]>
	</program>
</language>
</jittershader>